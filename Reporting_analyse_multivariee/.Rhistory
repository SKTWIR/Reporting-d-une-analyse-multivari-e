#####Exo 0####
runif(15)
#####Exo 0####
runif(15)
set.seed(9)
runif(15)
set.seed(9)
runif(15)
set.seed(9)
runif(15)
date = 15052025
set.seed(date)
hist(a)
a = rnorm(100, mean = 15, sd = sqrt(4))
hist(a)
date = 15052025
set.seed(date)
for (n in c(10,100,1000,10000)){
a = rnorm(100, mean = 15, sd = sqrt(4))
hist(a,
main = paste("histogramme =", n),
xlim=c(15-3*sqrt(4), 15+3*sqrt(4)),
ylim = c(0,0.25)
)
z = seq(15-3*sqrt(4), 15+3*sqrt(4), length=1000)
y = dnorm(z,mean = 15, sd = sqrt(4))
par(new = TRUE)
plot(z,y,type ="l",
xlim=c(15-3*sqrt(4), 15+3*sqrt(4)),
ylim = c(0,0.25)
)
}
date = 15052025
set.seed(date)
# Préparer un affichage 2x2 pour les 4 graphiques
par(mfrow=c(2,2))
for (n in c(10, 100, 1000, 10000)) {
# Générer un échantillon de taille n
a = rnorm(n, mean = 15, sd = sqrt(4))
# Créer l'histogramme de densité
hist(a,
probability = TRUE,  # Pour que l'histogramme soit une densité
main = paste("Histogramme pour n =", n),
xlim = c(15 - 3 * sqrt(4), 15 + 3 * sqrt(4)),
ylim = c(0, 0.25),
col = "lightblue",
border = "white"
)
# Tracer la courbe de densité théorique
z = seq(15 - 3 * sqrt(4), 15 + 3 * sqrt(4), length = 1000)
y = dnorm(z, mean = 15, sd = sqrt(4))
lines(z, y, col = "red", lwd = 2)
}
date = 15052025
set.seed(date)
# Préparer un affichage 2x2 pour les 4 graphiques
par(mfrow=c(2,2))
for (n in c(10, 100, 1000, 10000)) {
# Générer un échantillon de taille n
a = rnorm(n, mean = 15, sd = sqrt(4))
# Créer l'histogramme de densité
hist(a,
probability = TRUE,  # Pour que l'histogramme soit une densité
main = paste("Histogramme pour n =", n),
xlim = c(15 - 3 * sqrt(4), 15 + 3 * sqrt(4)),
ylim = c(0, 0.25),
col = "lightblue",
border = "white"
)
# Tracer la courbe de densité théorique
z = seq(15 - 3 * sqrt(4), 15 + 3 * sqrt(4), length = 1000)
y = dnorm(z, mean = 15, sd = sqrt(4))
lines(z, y, col = "red", lwd = 2)
}
date = 15052025
set.seed(date)
# Préparer un affichage 2x2 pour les 4 graphiques
par(mfrow=c(2,2))
for (n in c(10, 100, 1000, 10000)) {
# Générer un échantillon de taille n
a = rnorm(n, mean = 15, sd = sqrt(4))
# Créer l'histogramme de densité
hist(a,
probability = TRUE,  # Pour que l'histogramme soit une densité
main = paste("Histogramme pour n =", n),
xlim = c(15 - 3 * sqrt(4), 15 + 3 * sqrt(4)),
ylim = c(0, 0.25),
col = "lightblue",
border = "white"
)
# Tracer la courbe de densité théorique
z = seq(15 - 3 * sqrt(4), 15 + 3 * sqrt(4), length = 1000)
y = dnorm(z, mean = 15, sd = sqrt(4))
lines(z, y, col = "red", lwd = 2)
}
par(mfrow=c(2,2))
for (n in c(10, 100, 1000, 10000, 100000)) {
# Générer un échantillon de taille n
a = rnorm(n, mean = 15, sd = sqrt(4))
# Créer l'histogramme de densité
hist(a,
probability = TRUE,  # Pour que l'histogramme soit une densité
main = paste("Histogramme pour n =", n),
xlim = c(15 - 3 * sqrt(4), 15 + 3 * sqrt(4)),
ylim = c(0, 0.25),
col = "lightblue",
border = "white"
)
# Tracer la courbe de densité théorique
z = seq(15 - 3 * sqrt(4), 15 + 3 * sqrt(4), length = 1000)
y = dnorm(z, mean = 15, sd = sqrt(4))
lines(z, y, col = "red", lwd = 2)
}
date = 15052025
set.seed(date)
# Préparer un affichage 2x2 pour les 4 graphiques
par(mfrow=c(2,3))
for (n in c(10, 100, 1000, 10000, 100000)) {
# Générer un échantillon de taille n
a = rnorm(n, mean = 15, sd = sqrt(4))
# Créer l'histogramme de densité
hist(a,
probability = TRUE,  # Pour que l'histogramme soit une densité
main = paste("Histogramme pour n =", n),
xlim = c(15 - 3 * sqrt(4), 15 + 3 * sqrt(4)),
ylim = c(0, 0.25),
col = "lightblue",
border = "white"
)
# Tracer la courbe de densité théorique
z = seq(15 - 3 * sqrt(4), 15 + 3 * sqrt(4), length = 1000)
y = dnorm(z, mean = 15, sd = sqrt(4))
lines(z, y, col = "red", lwd = 2)
}
date = 15052025
set.seed(date)
# Préparer un affichage 2x2 pour les 4 graphiques
par(mfrow=c(2,2))
for (n in c(10, 100, 1000, 10000)) {
# Générer un échantillon de taille n
a = rnorm(n, mean = 15, sd = sqrt(4))
# Créer l'histogramme de densité
hist(a,
probability = TRUE,  # Pour que l'histogramme soit une densité
main = paste("Histogramme pour n =", n),
xlim = c(15 - 3 * sqrt(4), 15 + 3 * sqrt(4)),
ylim = c(0, 0.25),
col = "lightblue",
border = "white"
)
# Tracer la courbe de densité théorique
z = seq(15 - 3 * sqrt(4), 15 + 3 * sqrt(4), length = 1000)
y = dnorm(z, mean = 15, sd = sqrt(4))
lines(z, y, col = "red", lwd = 2)
}
date = 15052025
set.seed(date)
# Préparer un affichage 2x2 pour les 4 graphiques
par(mfrow=c(2,2))
for (n in c(10, 100, 1000, 10000)) {
# Générer un échantillon de taille n
a = rnorm(n, mean = 15, sd = sqrt(4))
# Créer l'histogramme de densité
hist(a,
probability = TRUE,  # Pour que l'histogramme soit une densité
main = paste("Histogramme pour n =", n),
xlim = c(15 - 3 * sqrt(4), 15 + 3 * sqrt(4)),
ylim = c(0, 0.25),
col = "lightblue",
border = "white"
)
# Tracer la courbe de densité théorique
z = seq(15 - 3 * sqrt(4), 15 + 3 * sqrt(4), length = 1000)
y = dnorm(z, mean = 15, sd = sqrt(4))
lines(z, y, col = "red", lwd = 2)
}
easynorm <- function(sigma){
# Génération de 800 valeurs suivant un loi N(0, sigma^2)
# puis, formatage en matrice de 400 lignes, 2 colonnes
z <- rnorm(400 * 2, sd = sigma) |>
matrix(400, 2)
# que font ces lignes ?
moy <- cbind( c(rep(-1, 100), rep( 1, 100), rep(0, 200)),
c(rep( 0, 200), rep(-1, 100), rep(1, 100)))
return(z + moy)
}
easynorm(sigma = 1)
b = easynorm(sigma = 1)
install.packages("rgl")
library(rgl)
plot(b)
par(new = TRUE)
b = easynorm(sigma = 1)
plot(b)
b = easynorm(sigma = 1)
plot(b)
#####Exo 2####
easynorm <- function(sigma){
# Génération de 800 valeurs suivant un loi N(0, sigma^2)
# puis, formatage en matrice de 400 lignes, 2 colonnes
z <- rnorm(400 * 2, sd = sigma) |> matrix(400, 2)
## ici on a |> qui représente le pipe, cad la création en deux au lieu d'une ligne de 800 valeurs
# que font ces lignes ?
# ces lignes là concentre en 4 points, 4 cluster les données
moy <- cbind( c(rep(-1, 100), rep( 1, 100), rep(0, 200)),
c(rep( 0, 200), rep(-1, 100), rep(1, 100)))
return(z + moy)
}
b = easynorm(sigma = 1)
plot(b)
print(((-2)-(-2.5**2))^2*(1-0.5)^2*(0-0.5)^2*(2-2.5)^2)
print(((-2)-(-2.5))^2*(1-0.5)^2*(0-0.5)^2*(2-2.5)^2)
distance = rbind(c(0,4,7,9,1),
c(4,0,3,5,3),
c(7,3,0,2,6),
c(9,5,2,0,8),
c(1,3,6,8,0))
distance = as.dist(distance)
print(dist(rbind(c(-2,1,0,2),
c(-2.5,0.5,0.5,2.5))),
method="euclidean")
print(sqt(((-2)-(-2.5))^2*(1-0.5)^2*(0-0.5)^2*(2-2.5)^2))
print(sqrt(((-2)-(-2.5))^2*(1-0.5)^2*(0-0.5)^2*(2-2.5)^2))
print(dist(rbind(c(-2,1,0,2),
c(-2.5,0.5,0.5,2.5))),
method="euclidean")
(-2)-(-2.5)^2
sqrt((-2)-(-2.5)^2)
sqrt((-2)-(-2.5)^2)
a =sqrt((-2)-(-2.5)^2)
a = -2-2.5*1-0.5*0-0.5*2-2.5
print(-2--2.5)
print(1-0.5)
shiny::runApp('GitHub/Reporting-d-une-analyse-multivari-e/Analyse_multivariée')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Analyse_multivariée')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Analyse_multivariée')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Analyse_multivariée')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
shiny::runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
shiny::runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
install.packages("leaflet")
shiny::runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
shiny::runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
shiny::runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
shiny::runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
runApp('GitHub/Reporting-d-une-analyse-multivari-e/Reporting_analyse_multivariee')
